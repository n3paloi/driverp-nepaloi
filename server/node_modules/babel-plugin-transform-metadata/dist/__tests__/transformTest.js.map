{"version":3,"sources":["../../src/__tests__/transformTest.js"],"names":["pluginPath","join","__dirname","babelrc","JSON","parse","readFileSync","babelConfig","plugins","addDisplayName","concat","create","describe","sync","forEach","inName","rec","outName","name","it","code","outFile","writeFileSync","toString"],"mappings":";;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,aAAa,cAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,MAAjC,EAAyC,UAAzC,CAAnB;;AACA,IAAMC,UAAUC,KAAKC,KAAL,CAAW,YAAGC,YAAH,CAAgB,cAAKL,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,UAAjC,CAAhB,CAAX,CAAhB;;AAEA,IAAMK;AACFJ,WAAS;AADP,GAECA,OAFD;AAGFK,WAAS,CACL,CAACR,UAAD,EAAa;AACTS,oBAAgB;AADP,GAAb,CADK,EAIPC,MAJO,CAIAP,QAAQK,OAJR;AAHP,EAAN;;AASA,IAAMG,SAAkB,KAAxB;AAEAC,SAAS,eAAT,EAA0B,YAAM;AAC5B,gBAAKC,IAAL,CAAUX,YAAY,YAAtB,EAAoCY,OAApC,CAA4C,UAACC,MAAD,EAAoB;AAC5D,QAAMC,MAAM,cAAKX,KAAL,CAAWU,MAAX,CAAZ;;AACA,QAAME,UAAkB,cAAKhB,IAAL,CAAUC,SAAV,EAAqB,MAArB,EAA6B,KAA7B,EAAuCc,IAAIE,IAA3C,YAAxB;;AACAC,OAAGH,IAAIE,IAAP,EAAa,YAAM;AACf;AADe,+BAEA,6BAAkBH,MAAlB,EAA0BR,WAA1B,CAFA;AAAA,UAERa,IAFQ,sBAERA,IAFQ;;AAGf,UAAIC,OAAJ;;AACA,UAAIV,MAAJ,EAAY;AACRU,kBAAUD,IAAV;;AACA,oBAAGE,aAAH,CAAiBL,OAAjB,EAA0BI,OAA1B;AACH,OAHD,MAGO;AACHA,kBAAU,YAAGf,YAAH,CAAgBW,OAAhB,EAAyBM,QAAzB,EAAV;AACA,6BAAOH,SAASC,OAAhB;AACH;AACJ,KAXD;AAYH,GAfD;AAgBH,CAjBD","file":"transformTest.js","sourcesContent":["/* eslint-env mocha */\n\nimport fs from 'fs'\nimport {transformFileSync} from '@babel/core'\nimport path from 'path'\nimport glob from 'glob'\nimport assert from 'assert'\n\nconst pluginPath = path.join(__dirname, '..', '..', 'dist', 'index.js')\nconst babelrc = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', '.babelrc')))\n\nconst babelConfig = {\n    babelrc: false,\n    ...babelrc,\n    plugins: [\n        [pluginPath, {\n            addDisplayName: true\n        }]\n    ].concat(babelrc.plugins)\n}\nconst create: boolean = false\n\ndescribe('transformTest', () => {\n    glob.sync(__dirname + '/data/*.js').forEach((inName: string) => {\n        const rec = path.parse(inName)\n        const outName: string = path.join(__dirname, 'data', 'out', `${rec.name}Out.js`)\n        it(rec.name, () => {\n            // const inFile = fs.readFileSync(inName).toString()\n            const {code} = transformFileSync(inName, babelConfig)\n            let outFile: string\n            if (create) {\n                outFile = code\n                fs.writeFileSync(outName, outFile)\n            } else {\n                outFile = fs.readFileSync(outName).toString()\n                assert(code === outFile)\n            }\n        })\n    })\n})\n"]}