{"version":3,"sources":["../../src/factories/createCreateCreateGenericTypeMetadata.js"],"names":["createCreateCreateGenericTypeMetadata","t","externalTypeNames","internalTypes","markGenerics","createCreateGenericTypeMetadata","createObjectTypeMetadata","createGenericTypeMetadata","annotation","typeParameters","type","argument","id","i","length","name","stringLiteral","tp","params","param","result","types","map","par","interfaceId","arrayExpression","numericLiteral","concat","Array","isArray","internalType","get","has","imported","nullLiteral"],"mappings":";;;;;AAAe,SAASA,qCAAT,CACXC,CADW,EAEXC,iBAFW,EAGXC,aAHW,EAIXC,YAJW,EAKb;AACE,SAAO,SAASC,+BAAT,CAAyCC,wBAAzC,EAAmE;AACtE,WAAO,SAASC,yBAAT,CAAmCC,UAAnC,EAA+CC,cAA/C,EAA+D;AAClE,UAAID,WAAWE,IAAX,KAAoB,sBAAxB,EAAgD;AAC5C,eAAOH,0BAA0BC,WAAWG,QAArC,CAAP;AACH;;AAED,UAAIC,KAAKJ,WAAWI,EAApB;;AAEA,UAAIH,cAAJ,EAAoB;AAChB,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,eAAeK,MAAnC,EAA2CD,GAA3C,EAAgD;AAC5C,cAAIJ,eAAeI,CAAf,EAAkBE,IAAlB,KAA2BH,GAAGG,IAAlC,EAAwC;AACpC,mBAAOd,EAAEe,aAAF,CAAgBJ,GAAGG,IAAnB,CAAP;AACH;AACJ;AACJ;;AACD,UAAME,KAAKT,WAAWC,cAAtB;;AACA,UAAIQ,MACGA,GAAGC,MADN,IAEGD,GAAGC,MAAH,CAAUJ,MAFjB,EAGE;AACE,YAAMK,QAAQF,GAAGC,MAAH,CAAU,CAAV,CAAd;AACA,YAAIE,MAAJ;;AAEA,gBAAQD,MAAMT,IAAd;AACI,eAAK,sBAAL;AACA,eAAK,uBAAL;AACIU,qBAASb,0BAA0BY,KAA1B,CAAT;AACA;;AACJ,eAAK,qBAAL;AACIC,qBAASD,MAAME,KAAN,CAAYC,GAAZ,CAAgB,UAACC,GAAD;AAAA,qBAAShB,0BAA0BgB,GAA1B,CAAT;AAAA,aAAhB,CAAT;AACA;;AACJ;AACIH,qBAAS,IAAT;AATR;;AAYA,YAAIA,MAAJ,EAAY;AACR,cAAMI,cAAcpB,aAAaQ,GAAGG,IAAhB,CAApB;AACA,iBAAOS,cACDvB,EAAEwB,eAAF,CACE,CAACxB,EAAEyB,cAAF,CAAiBF,WAAjB,CAAD,EAAgCG,MAAhC,CACIC,MAAMC,OAAN,CAAcT,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CADrC,CADF,CADC,GAMDA,MANN;AAOH;AACJ;;AAED,UAAMU,eAAe3B,cAAc4B,GAAd,CAAkBnB,GAAGG,IAArB,CAArB;;AACA,UAAIe,YAAJ,EAAkB;AACd,eAAOxB,yBAAyBwB,YAAzB,CAAP;AACH;;AACD,UAAI5B,kBAAkB8B,GAAlB,CAAsBpB,GAAGG,IAAzB,CAAJ,EAAoC;AAChC,YAAMkB,WAAW/B,kBAAkB6B,GAAlB,CAAsBnB,GAAGG,IAAzB,CAAjB;AAEA,eAAOkB,WAAWhC,EAAEe,aAAF,CAAgBiB,QAAhB,CAAX,GAAuChC,EAAEiC,WAAF,EAA9C;AACH;;AAED,aAAOtB,EAAP;AACH,KAzDD;AA0DH,GA3DD;AA4DH","file":"createCreateCreateGenericTypeMetadata.js","sourcesContent":["export default function createCreateCreateGenericTypeMetadata(\n    t,\n    externalTypeNames,\n    internalTypes,\n    markGenerics\n) {\n    return function createCreateGenericTypeMetadata(createObjectTypeMetadata) {\n        return function createGenericTypeMetadata(annotation, typeParameters) {\n            if (annotation.type === 'TypeofTypeAnnotation') {\n                return createGenericTypeMetadata(annotation.argument)\n            }\n\n            let id = annotation.id\n\n            if (typeParameters) {\n                for (let i = 0; i < typeParameters.length; i++) {\n                    if (typeParameters[i].name === id.name) {\n                        return t.stringLiteral(id.name)\n                    }\n                }\n            }\n            const tp = annotation.typeParameters\n            if (tp\n                && tp.params\n                && tp.params.length\n            ) {\n                const param = tp.params[0]\n                let result\n\n                switch (param.type) {\n                    case 'TypeofTypeAnnotation':\n                    case 'GenericTypeAnnotation':\n                        result = createGenericTypeMetadata(param)\n                        break\n                    case 'UnionTypeAnnotation':\n                        result = param.types.map((par) => createGenericTypeMetadata(par))\n                        break\n                    default:\n                        result = null\n                }\n\n                if (result) {\n                    const interfaceId = markGenerics[id.name]\n                    return interfaceId\n                        ? t.arrayExpression(\n                            [t.numericLiteral(interfaceId)].concat(\n                                Array.isArray(result) ? result : [result]\n                            )\n                        )\n                        : result\n                }\n            }\n\n            const internalType = internalTypes.get(id.name)\n            if (internalType) {\n                return createObjectTypeMetadata(internalType)\n            }\n            if (externalTypeNames.has(id.name)) {\n                const imported = externalTypeNames.get(id.name)\n\n                return imported ? t.stringLiteral(imported) : t.nullLiteral()\n            }\n\n            return id\n        }\n    }\n}\n\n"]}