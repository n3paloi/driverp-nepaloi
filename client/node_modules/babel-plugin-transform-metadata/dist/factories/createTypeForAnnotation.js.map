{"version":3,"sources":["../../src/factories/createTypeForAnnotation.js"],"names":["createTypeForAnnotation","t","externalTypeNames","createCreateObjectTypeMetadata","createCreateGenericTypeMetadata","createGenericTypeMetadata","createObjectTypeMetadata","typeForAnnotation","annotation","typeParameters","type","identifier","unaryExpression","numericLiteral","argument"],"mappings":";;;;;AAAe,SAASA,uBAAT,CACXC,CADW,EAEXC,iBAFW,EAGXC,8BAHW,EAIXC,+BAJW,EAKb;AACE,MAAIC,yBAAJ;AACA,MAAIC,wBAAJ;;AAEA,WAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,cAAvC,EAAuD;AACnD,QAAI,CAACD,UAAL,EAAiB;AACb,aAAO,IAAP;AACH;;AACD,YAAQA,WAAWE,IAAnB;AACI,WAAK,sBAAL;AACI,eAAOT,EAAEU,UAAF,CAAa,QAAb,CAAP;;AACJ,WAAK,sBAAL;AACI,eAAOV,EAAEU,UAAF,CAAa,QAAb,CAAP;;AACJ,WAAK,uBAAL;AACI,eAAOV,EAAEU,UAAF,CAAa,SAAb,CAAP;;AACJ,WAAK,oBAAL;AACI,eAAOV,EAAEW,eAAF,CAAkB,MAAlB,EAA0BX,EAAEY,cAAF,CAAiB,CAAjB,CAA1B,CAAP;;AACJ,WAAK,sBAAL;AACI,eAAOR,0BAA0BG,WAAWM,QAArC,CAAP;;AACJ,WAAK,uBAAL;AACI,eAAOT,0BAA0BG,UAA1B,EAAsCC,cAAtC,CAAP;;AACJ,WAAK,sBAAL;AACI,eAAOH,yBAAyBE,UAAzB,CAAP;;AACJ,WAAK,wBAAL;AACI,eAAOP,EAAEU,UAAF,CAAa,UAAb,CAAP;;AACJ;AACI,eAAO,IAAP;AAlBR;AAoBH;;AACDL,6BAA2BH,+BAA+BI,iBAA/B,CAA3B;AACAF,8BAA4BD,gCAAgCE,wBAAhC,CAA5B;AACA,SAAOC,iBAAP;AACH","file":"createTypeForAnnotation.js","sourcesContent":["export default function createTypeForAnnotation(\n    t,\n    externalTypeNames,\n    createCreateObjectTypeMetadata,\n    createCreateGenericTypeMetadata\n) {\n    let createGenericTypeMetadata\n    let createObjectTypeMetadata\n\n    function typeForAnnotation(annotation, typeParameters) {\n        if (!annotation) {\n            return null\n        }\n        switch (annotation.type) {\n            case 'StringTypeAnnotation':\n                return t.identifier('String');\n            case 'NumberTypeAnnotation':\n                return t.identifier('Number');\n            case 'BooleanTypeAnnotation':\n                return t.identifier('Boolean');\n            case 'VoidTypeAnnotation':\n                return t.unaryExpression('void', t.numericLiteral(0));\n            case 'TypeofTypeAnnotation':\n                return createGenericTypeMetadata(annotation.argument)\n            case 'GenericTypeAnnotation':\n                return createGenericTypeMetadata(annotation, typeParameters)\n            case 'ObjectTypeAnnotation':\n                return createObjectTypeMetadata(annotation)\n            case 'FunctionTypeAnnotation':\n                return t.identifier('Function')\n            default:\n                return null;\n        }\n    }\n    createObjectTypeMetadata = createCreateObjectTypeMetadata(typeForAnnotation)\n    createGenericTypeMetadata = createCreateGenericTypeMetadata(createObjectTypeMetadata)\n    return typeForAnnotation\n}\n"]}