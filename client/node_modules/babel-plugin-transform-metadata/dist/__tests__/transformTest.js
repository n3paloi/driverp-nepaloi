"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _core = require("@babel/core");

var _path = _interopRequireDefault(require("path"));

var _glob = _interopRequireDefault(require("glob"));

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var pluginPath = _path.default.join(__dirname, '..', '..', 'dist', 'index.js');

var babelrc = JSON.parse(_fs.default.readFileSync(_path.default.join(__dirname, '..', '..', '.babelrc')));

var babelConfig = _extends({
  babelrc: false
}, babelrc, {
  plugins: [[pluginPath, {
    addDisplayName: true
  }]].concat(babelrc.plugins)
});

var create = false;
describe('transformTest', function () {
  _glob.default.sync(__dirname + '/data/*.js').forEach(function (inName) {
    var rec = _path.default.parse(inName);

    var outName = _path.default.join(__dirname, 'data', 'out', rec.name + "Out.js");

    it(rec.name, function () {
      // const inFile = fs.readFileSync(inName).toString()
      var _transformFileSync = (0, _core.transformFileSync)(inName, babelConfig),
          code = _transformFileSync.code;

      var outFile;

      if (create) {
        outFile = code;

        _fs.default.writeFileSync(outName, outFile);
      } else {
        outFile = _fs.default.readFileSync(outName).toString();
        (0, _assert.default)(code === outFile);
      }
    });
  });
});
//# sourceMappingURL=transformTest.js.map