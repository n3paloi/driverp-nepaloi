{"version":3,"sources":["../src/index.js"],"names":["defaults","typeNameStrategy","markGenerics","onlyExports","addFileName","addDisplayName","injectPrefix","ambiantTypeCastImport","ambiantDepsImport","babelPluginTransformMetadata","t","types","cnf","visitor","Program","path","opts","file","prefix","process","cwd","filename","substring","length","getUniqueTypeName","state","ambiantTypeCast","internalTypes","Map","externalTypeNames","exportNames","functionsWithJsx","Set","traverse","createCreateObjectTypeMetadata","createCreateGenericTypeMetadata","typeForAnnotation","typeForAnnotations","injectParamTypes","parentPathInsertAfter","reflectionState","magicTypeCasts","parentPaths","magicTypeCastExpression","node","specifiers","local","name","replaceMagicTypeCasts","forEach","remove"],"mappings":";;;;;AAAA;;AAEA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;;;AAEA,IAAMA,WAAW;AACbC,oBAAkB,UADL;AAEbC,gBAAc;AAAC,eAAW,CAAZ;AAAe,eAAW;AAA1B,GAFD;AAGbC,eAAa,KAHA;AAIbC,eAAa,KAJA;AAKbC,kBAAgB,KALH;AAMbC,gBAAc,IAND;AAObC,yBAAuB,mCAPV;AAQbC,qBAAmB;AARN,CAAjB;;AAWe,SAASC,4BAAT,OAAkD;AAAA,MAAJC,CAAI,QAAXC,KAAW;AAC7D,MAAIC,GAAJ;AACA,SAAO;AACHC,aAAS;AACLC,aADK,mBACGC,IADH,SACuB;AAAA,YAAbC,IAAa,SAAbA,IAAa;AAAA,YAAPC,IAAO,SAAPA,IAAO;;AACxB,YAAI,CAACL,GAAL,EAAU;AACNA,6BAAUZ,QAAV,EAAuBgB,IAAvB;AACH;;AACD,YAAME,SAASC,UAAUA,QAAQC,GAAR,EAAV,GAA0B,EAAzC;AACA,YAAMC,WAAW,CAACT,IAAIR,WAAL,IAAoBa,KAAKD,IAAL,CAAUK,QAAV,KAAuB,SAA3C,GACX,IADW,GAEX,oBAASH,MAAT,IAAmBD,KAAKD,IAAL,CAAUK,QAAV,CAAmBC,SAAnB,CAA6BJ,OAAOK,MAApC,CAFzB;AAGA,YAAMC,oBAAoB,sCAAwBZ,IAAIX,gBAA5B,CAA1B;AACA,YAAMwB,QAAQ;AACVD,8CADU;AAEVjB,iCAAuBK,IAAIL,qBAFjB;AAGVC,6BAAmBI,IAAIJ,iBAHb;AAIVkB,2BAAiB,IAJP;AAKVC,yBAAe,IAAIC,GAAJ,EALL;AAMVC,6BAAmB,IAAID,GAAJ,EANT;AAOVE,uBAAa,IAAIF,GAAJ,EAPH;AAQVG,4BAAkB,IAAIC,GAAJ;AARR,SAAd;AAUAjB,aAAKkB,QAAL,wBAA4BR,KAA5B;AACA,YAAMS,iCAAiC,mDACnCxB,CADmC,CAAvC;AAGA,YAAMyB,kCAAkC,oDACpCzB,CADoC,EAEpCe,MAAMI,iBAF8B,EAGpCJ,MAAME,aAH8B,EAIpCf,IAAIV,YAJgC,CAAxC;AAMA,YAAMkC,oBAAoB,sCACtB1B,CADsB,EAEtBe,MAAMI,iBAFgB,EAGtBK,8BAHsB,EAItBC,+BAJsB,CAA1B;AAMA,YAAME,qBAAqB,uCACvBD,iBADuB,CAA3B;AAIA,YAAME,mBAAmB,qCACrB5B,CADqB,EAErBE,IAAIN,YAFiB,EAGrB+B,kBAHqB,EAIrBZ,MAAMM,gBAJe,EAKrBV,QALqB,EAMrBT,IAAIP,cANiB,CAAzB;AAQA,YAAMkC,wBAAwB,0CAA4BD,gBAA5B,CAA9B;AACA,YAAME,kBAAkB;AACpB9B,cADoB;AAEpB+B,0BAAgB,EAFI;AAGpBC,uBAAa,EAHO;AAIpBvC,uBAAaS,IAAIT,WAJG;AAKpB2B,uBAAaL,MAAMK,WALC;AAMpBa,mCAAyBlB,MAAMC,eAAN,GACnBD,MAAMC,eAAN,CAAsBkB,IAAtB,CAA2BC,UAA3B,CAAsC,CAAtC,EAAyCC,KAAzC,CAA+CC,IAD5B,GAEnB;AARc,SAAxB;AAWAhC,aAAKkB,QAAL,0BAA8BO,eAA9B;AAEA,YAAMQ,wBAAwB,0CAC1BtC,CAD0B,EAE1Be,MAAMI,iBAFoB,CAA9B;AAIAW,wBAAgBC,cAAhB,CAA+BQ,OAA/B,CAAuCD,qBAAvC;AACAR,wBAAgBE,WAAhB,CAA4BO,OAA5B,CAAoCV,qBAApC;;AAEA,YAAId,MAAMC,eAAV,EAA2B;AACvBD,gBAAMC,eAAN,CAAsBwB,MAAtB;AACH;AACJ;AAxEI;AADN,GAAP;AA4EH","file":"index.js","sourcesContent":["import {basename} from 'path'\n\nimport getTypesInfo from './visitors/getTypesInfo'\nimport addReflections from './visitors/addReflections'\n\nimport createTypeForAnnotation from './factories/createTypeForAnnotation'\nimport createCreateCreateGenericTypeMetadata from\n    './factories/createCreateCreateGenericTypeMetadata'\nimport createCreateCreateObjectTypeMetadata from './factories/createCreateCreateObjectTypeMetadata'\nimport createTypeForAnnotations from './factories/createTypeForAnnotations'\nimport createGetUniqueTypeName from './factories/createGetUniqueTypeName'\n\nimport createParentPathInsertAfter from './modifiers/createParentPathInsertAfter'\nimport createReplaceMagicTypeCasts from './modifiers/createReplaceMagicTypeCasts'\n\nimport createInjectParamTypes from './metaCreators/createInjectParamTypes'\n\nconst defaults = {\n    typeNameStrategy: 'typeName',\n    markGenerics: {'ISource': 1, 'IStatus': 2},\n    onlyExports: false,\n    addFileName: false,\n    addDisplayName: false,\n    injectPrefix: '_r',\n    ambiantTypeCastImport: 'babel-plugin-transform-metadata/_',\n    ambiantDepsImport: 'babel-plugin-transform-metadata/Deps'\n}\n\nexport default function babelPluginTransformMetadata({types: t}) {\n    let cnf\n    return {\n        visitor: {\n            Program(path, {opts, file}) {\n                if (!cnf) {\n                    cnf = {...defaults, ...opts}\n                }\n                const prefix = process ? process.cwd() : ''\n                const filename = !cnf.addFileName || file.opts.filename === 'unknown'\n                    ? null\n                    : basename(prefix) + file.opts.filename.substring(prefix.length)\n                const getUniqueTypeName = createGetUniqueTypeName(cnf.typeNameStrategy)\n                const state = {\n                    getUniqueTypeName,\n                    ambiantTypeCastImport: cnf.ambiantTypeCastImport,\n                    ambiantDepsImport: cnf.ambiantDepsImport,\n                    ambiantTypeCast: null,\n                    internalTypes: new Map(),\n                    externalTypeNames: new Map(),\n                    exportNames: new Map(),\n                    functionsWithJsx: new Set()\n                }\n                path.traverse(getTypesInfo, state)\n                const createCreateObjectTypeMetadata = createCreateCreateObjectTypeMetadata(\n                    t\n                )\n                const createCreateGenericTypeMetadata = createCreateCreateGenericTypeMetadata(\n                    t,\n                    state.externalTypeNames,\n                    state.internalTypes,\n                    cnf.markGenerics\n                )\n                const typeForAnnotation = createTypeForAnnotation(\n                    t,\n                    state.externalTypeNames,\n                    createCreateObjectTypeMetadata,\n                    createCreateGenericTypeMetadata\n                )\n                const typeForAnnotations = createTypeForAnnotations(\n                    typeForAnnotation\n                )\n\n                const injectParamTypes = createInjectParamTypes(\n                    t,\n                    cnf.injectPrefix,\n                    typeForAnnotations,\n                    state.functionsWithJsx,\n                    filename,\n                    cnf.addDisplayName\n                )\n                const parentPathInsertAfter = createParentPathInsertAfter(injectParamTypes)\n                const reflectionState = {\n                    t,\n                    magicTypeCasts: [],\n                    parentPaths: [],\n                    onlyExports: cnf.onlyExports,\n                    exportNames: state.exportNames,\n                    magicTypeCastExpression: state.ambiantTypeCast\n                        ? state.ambiantTypeCast.node.specifiers[0].local.name\n                        : ''\n                }\n\n                path.traverse(addReflections, reflectionState)\n\n                const replaceMagicTypeCasts = createReplaceMagicTypeCasts(\n                    t,\n                    state.externalTypeNames\n                )\n                reflectionState.magicTypeCasts.forEach(replaceMagicTypeCasts)\n                reflectionState.parentPaths.forEach(parentPathInsertAfter)\n\n                if (state.ambiantTypeCast) {\n                    state.ambiantTypeCast.remove()\n                }\n            }\n        }\n    }\n}\n"]}