"use strict";

exports.__esModule = true;
exports.default = void 0;
var getTypesInfo = {
  ImportDeclaration: function ImportDeclaration(path, state) {
    /* eslint-disable no-param-reassign */
    var node = path.node;
    var strPath = node.source.value;

    if (strPath === state.ambiantTypeCastImport) {
      state.ambiantTypeCast = path;
    }
  },
  JSXElement: function JSXElement(path, state) {
    if (path.parent.type === 'JSXElement') {
      return;
    }

    var scope = path.scope;
    var funcPath;

    do {
      scope = scope.getFunctionParent();

      if (!scope || scope.path.isProgram()) {
        break;
      }

      funcPath = scope.path;
      scope = scope.parent;
    } while (scope);

    if (funcPath) {
      state.functionsWithJsx.add(funcPath.node);
    }
  },
  'ImportSpecifier|ImportDefaultSpecifier': function ImportSpecifierImportDefaultSpecifier(path, state) {
    var node = path.node;
    var parent = path.parent;
    var importedName = node.type === 'ImportDefaultSpecifier' ? node.local.name : node.imported.name;

    if (parent.importKind !== 'type') {
      return;
    }

    var token = state.getUniqueTypeName(parent.source.value, importedName);
    state.externalTypeNames.set(node.local.name, token);
  },
  ExportSpecifier: function ExportSpecifier(path, state) {
    var node = path.node;
    state.exportNames.set(node.local.name, node.exported.name);
  },
  'ExportNamedDeclaration|ExportDefaultDeclaration': function ExportNamedDeclarationExportDefaultDeclaration(path, state) {
    var node = path.node;
    var declaration = node.declaration;

    if (declaration) {
      var id = declaration.id || declaration;
      state.exportNames.set(id.name, id.name);
    }
  },
  'TypeParameter': function TypeParameter(path, state) {
    var node = path.node;
    state.externalTypeNames.set(node.name, null);
  },
  'TypeAlias|InterfaceDeclaration': function TypeAliasInterfaceDeclaration(path, state) {
    var node = path.node;
    var parent = path.parent;

    if (parent.type !== 'ExportNamedDeclaration') {
      state.internalTypes.set(node.id.name, node.type === 'TypeAlias' ? node.right : node.body);
      return;
    }

    var token = state.getUniqueTypeName('', node.id.name);
    state.externalTypeNames.set(node.id.name, token);
  }
};
var _default = getTypesInfo;
exports.default = _default;
//# sourceMappingURL=getTypesInfo.js.map