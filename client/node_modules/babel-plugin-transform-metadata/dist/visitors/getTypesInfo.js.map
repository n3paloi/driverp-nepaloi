{"version":3,"sources":["../../src/visitors/getTypesInfo.js"],"names":["getTypesInfo","ImportDeclaration","path","state","node","strPath","source","value","ambiantTypeCastImport","ambiantTypeCast","JSXElement","parent","type","scope","funcPath","getFunctionParent","isProgram","functionsWithJsx","add","importedName","local","name","imported","importKind","token","getUniqueTypeName","externalTypeNames","set","ExportSpecifier","exportNames","exported","declaration","id","internalTypes","right","body"],"mappings":"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","file":"getTypesInfo.js","sourcesContent":["const getTypesInfo = {\n    ImportDeclaration(path, state) {\n        /* eslint-disable no-param-reassign */\n        const node = path.node\n        const strPath = node.source.value\n        if (strPath === state.ambiantTypeCastImport) {\n            state.ambiantTypeCast = path\n        }\n    },\n\n    JSXElement(path, state) {\n        if (path.parent.type === 'JSXElement') {\n            return\n        }\n        let scope = path.scope\n        let funcPath\n        do {\n            scope = scope.getFunctionParent()\n            if (!scope || scope.path.isProgram()) {\n                break\n            }\n            funcPath = scope.path\n            scope = scope.parent\n        } while (scope)\n        if (funcPath) {\n            state.functionsWithJsx.add(funcPath.node)\n        }\n    },\n\n    'ImportSpecifier|ImportDefaultSpecifier'(path, state) {\n        const node = path.node\n        const parent = path.parent\n        const importedName = node.type === 'ImportDefaultSpecifier'\n            ? node.local.name\n            : node.imported.name\n        if (parent.importKind !== 'type') {\n            return\n        }\n\n        const token = state.getUniqueTypeName(parent.source.value, importedName)\n\n        state.externalTypeNames.set(node.local.name, token)\n    },\n\n    ExportSpecifier(path, state) {\n        const node = path.node\n        state.exportNames.set(node.local.name, node.exported.name)\n    },\n\n    'ExportNamedDeclaration|ExportDefaultDeclaration'(path, state) {\n        const node = path.node\n        const declaration = node.declaration\n        if (declaration) {\n            const id = declaration.id || declaration\n            state.exportNames.set(id.name, id.name)\n        }\n    },\n\n    'TypeParameter'(path, state) {\n        const node = path.node\n        state.externalTypeNames.set(\n            node.name,\n            null\n        )\n    },\n    'TypeAlias|InterfaceDeclaration'(path, state) {\n        const node = path.node\n        const parent = path.parent\n        if (parent.type !== 'ExportNamedDeclaration') {\n            state.internalTypes.set(\n                node.id.name,\n                node.type === 'TypeAlias'\n                    ? node.right\n                    : node.body\n                )\n            return\n        }\n        const token = state.getUniqueTypeName('', node.id.name)\n\n        state.externalTypeNames.set(node.id.name, token)\n    }\n}\n\nexport default getTypesInfo\n"]}