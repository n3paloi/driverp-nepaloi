{"version":3,"sources":["../../src/visitors/addReflections.js"],"names":["addReflections","TypeCastExpression","path","magicTypeCasts","magicTypeCastExpression","node","expression","name","push","onlyExports","parentPaths","exportNames","parent","ref","insertPath","type","parentPath","id","has","params","body","i","length","bodyNode","kind"],"mappings":";;;;AAAA,IAAMA,iBAAiB;AACnBC,oBADmB,8BACAC,IADA,QACiD;AAAA,QAA1CC,cAA0C,QAA1CA,cAA0C;AAAA,QAA1BC,uBAA0B,QAA1BA,uBAA0B;;AAChE,QAAIF,KAAKG,IAAL,CAAUC,UAAV,CAAqBC,IAArB,KAA8BH,uBAAlC,EAA2D;AACvDD,qBAAeK,IAAf,CAAoBN,IAApB;AACH;AACJ,GALkB;AAMnB,mFANmB,wFAOfA,IAPe,SASjB;AAAA,QADGO,WACH,SADGA,WACH;AAAA,QADgBC,WAChB,SADgBA,WAChB;AAAA,QAD6BC,WAC7B,SAD6BA,WAC7B;AACE,QAAMN,OAAOH,KAAKG,IAAlB;AACA,QAAMO,SAASV,KAAKU,MAApB;AACA,QAAIC,GAAJ;AACA,QAAIC,UAAJ;;AACA,YAAQF,OAAOG,IAAf;AACI,WAAK,0BAAL;AACA,WAAK,wBAAL;AACID,qBAAaZ,KAAKc,UAAlB;AACAH,cAAMR,KAAKY,EAAX;AACA;;AACJ,WAAK,oBAAL;AACIH,qBAAaZ,KAAKc,UAAL,CAAgBA,UAA7B;AACAH,cAAMD,OAAOK,EAAb;AACA;;AACJ,WAAK,SAAL;AACIH,qBAAaZ,IAAb;AACAW,cAAMR,KAAKY,EAAX;AACA;;AACJ;AACIJ,cAAM,IAAN;AACAC,qBAAa,IAAb;AAhBR;;AAmBA,QAAI,CAACA,UAAL,EAAiB;AACb;AACH;;AACD,QAAIL,eAAe,CAACE,YAAYO,GAAZ,CAAgBL,IAAIN,IAApB,CAApB,EAA+C;AAC3C;AACH;;AAED,QAAIY,MAAJ;;AACA,QAAId,KAAKU,IAAL,KAAc,kBAAlB,EAAsC;AAClC,UAAMK,OAAOf,KAAKe,IAAL,CAAUA,IAAvB;;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,KAAKE,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,YAAME,WAAWH,KAAKC,CAAL,CAAjB;;AACA,YACIE,SAASR,IAAT,KAAkB,aAAlB,IACGQ,SAASC,IAAT,KAAkB,aAFzB,EAGE;AACEL,mBAASI,SAASJ,MAAlB;AACA;AACH,SAND,MAMO,IAAII,SAASR,IAAT,KAAkB,eAAtB,EAAuC,CAC1C;AACH;AACJ;AACJ,KAdD,MAcO;AACHI,eAASd,KAAKc,MAAd;AACH,KAhDH,CAkDE;;;AACA;AACIT,kBAAYF,IAAZ,CAAiB,CACbM,UADa,EAEbK,MAFa,EAGbN,GAHa,EAIbR,IAJa,CAAjB;AAMH;AACJ;AApEkB,CAAvB;eAuEeL,c","file":"addReflections.js","sourcesContent":["const addReflections = {\n    TypeCastExpression(path, {magicTypeCasts, magicTypeCastExpression}) {\n        if (path.node.expression.name === magicTypeCastExpression) {\n            magicTypeCasts.push(path)\n        }\n    },\n    'ClassDeclaration|FunctionDeclaration|FunctionExpression|ArrowFunctionExpression'(\n        path,\n        {onlyExports, parentPaths, exportNames}\n    ) {\n        const node = path.node\n        const parent = path.parent\n        let ref\n        let insertPath\n        switch (parent.type) {\n            case 'ExportDefaultDeclaration':\n            case 'ExportNamedDeclaration':\n                insertPath = path.parentPath\n                ref = node.id\n                break\n            case 'VariableDeclarator':\n                insertPath = path.parentPath.parentPath\n                ref = parent.id\n                break\n            case 'Program':\n                insertPath = path\n                ref = node.id\n                break\n            default:\n                ref = null\n                insertPath = null\n        }\n\n        if (!insertPath) {\n            return\n        }\n        if (onlyExports && !exportNames.has(ref.name)) {\n            return\n        }\n\n        let params\n        if (node.type === 'ClassDeclaration') {\n            const body = node.body.body\n            for (let i = 0; i < body.length; i++) {\n                const bodyNode = body[i]\n                if (\n                    bodyNode.type === 'ClassMethod'\n                    && bodyNode.kind === 'constructor'\n                ) {\n                    params = bodyNode.params\n                    break\n                } else if (bodyNode.type === 'ClassProperty') {\n                    // @todo parameters from props\n                }\n            }\n        } else {\n            params = node.params\n        }\n\n        // if (params)\n        {\n            parentPaths.push([\n                insertPath,\n                params,\n                ref,\n                node\n            ])\n        }\n    }\n}\n\nexport default addReflections\n"]}