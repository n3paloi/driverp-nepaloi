{"version":3,"sources":["../../src/modifiers/createReplaceMagicTypeCasts.js"],"names":["createReplaceMagicTypeCasts","t","externalTypeNames","replaceMagicTypeCasts","path","node","typeAnnotation","id","name","get","replaceWith","stringLiteral"],"mappings":";;;;;AAAe,SAASA,2BAAT,CAAqCC,CAArC,EAAwCC,iBAAxC,EAA2D;AACtE,SAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACxC,QAAMC,OAAOD,KAAKC,IAAlB;AACA,QAAMC,iBAAiBD,KAAKC,cAAL,IAAuBD,KAAKC,cAAL,CAAoBA,cAAlE;AACA,QAAMC,KAAKD,eAAeC,EAA1B;AACA,QAAMC,OAAON,kBAAkBO,GAAlB,CAAsBF,GAAGC,IAAzB,CAAb;;AACA,QAAIA,IAAJ,EAAU;AACNJ,WAAKM,WAAL,CAAiBT,EAAEU,aAAF,CAAgBH,IAAhB,CAAjB;AACH;AACJ,GARD;AASH","file":"createReplaceMagicTypeCasts.js","sourcesContent":["export default function createReplaceMagicTypeCasts(t, externalTypeNames) {\n    return function replaceMagicTypeCasts(path) {\n        const node = path.node\n        const typeAnnotation = node.typeAnnotation && node.typeAnnotation.typeAnnotation\n        const id = typeAnnotation.id\n        const name = externalTypeNames.get(id.name)\n        if (name) {\n            path.replaceWith(t.stringLiteral(name))\n        }\n    }\n}\n"]}